events {
	worker_connections 1024;
}
http {
	lua_package_path "/usr/local/openresty/?.lua;;";
	resolver 127.0.0.11 valid=1s ipv6=off;

	# cache for discovery metadata documents
	#lua_shared_dict discovery 1m;
	# cache for JWKs
	#lua_shared_dict jwks 1m;

	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';
                      
                      
	access_log /var/log/nginx/access_gateway.log main;	  
	error_log /var/log/nginx/error_gateway.log ;
	
	server {


	listen 443 ssl default_server;
	server_name localhost;
    
	# TLS config
	ssl_certificate      /usr/local/openresty/nginx/conf/ssl/localhost.crt;
	ssl_certificate_key  /usr/local/openresty/nginx/conf/ssl/localhost.key;
	ssl_session_cache    shared:SSL:10m;
	ssl_session_timeout  5m;
	ssl_ciphers          HIGH:!aNULL:!MD5;
	ssl_protocols        TLSv1.3;
    
	expires           0;
	add_header        Cache-Control private;

	location / {
	set $access_token "";
	
	access_by_lua_block{
		-- connect to redis server
		local redis = require "resty.redis"
		local red = redis:new()
		local ok, err = red:connect("redis_proje_api", 6379)
		if not ok then
			ngx.say("failed to connect: ", err)
			return
		end	  

		-- authenticate redis server
		local result, err = red:auth("9090")
		if not result then
			ngx.say("failed to authenticate: ", err)
			return
		end
		
		-- get access token from redis
		local result, err = red:get(ngx.var.http_apikey)
                if not result then
                    ngx.say("fiald to get access token: ", err)
                    return
                end		
		ngx.var.access_token = result
		
		}
		
		proxy_set_header  apikey $access_token;
		proxy_pass        http://$host:80$uri;
		}   
	}
}
