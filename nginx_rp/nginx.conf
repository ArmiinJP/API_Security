events {
	worker_connections 1024;
}
http {
	lua_package_path "/usr/local/openresty/?.lua;;";
	resolver 127.0.0.11 valid=1s ipv6=off;

	# cache for discovery metadata documents
	lua_shared_dict discovery 1m;
	# cache for JWKs
	lua_shared_dict jwks 1m;

	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';
                      
                      
	access_log /var/log/nginx/access_rp.log;	  
	error_log /var/log/nginx/error_rp.log;
	
	server {


	listen 1443 ssl default_server;
	server_name localhost;
    
	# TLS config
	ssl_certificate      /usr/local/openresty/nginx/conf/ssl/localhost.crt;
	ssl_certificate_key  /usr/local/openresty/nginx/conf/ssl/localhost.key;
	ssl_session_cache    shared:SSL:10m;
	ssl_session_timeout  5m;
	ssl_ciphers          HIGH:!aNULL:!MD5;
	ssl_protocols        TLSv1.3;
    
	expires           0;
	add_header        Cache-Control private;

	access_by_lua_block{
		local opts = {
			redirect_uri = "/welcome",
			discovery = string.format("https://%s:8443/auth/realms/welcome/.well-known/openid-configuration",ngx.var.host),
			client_id = "nginx",
			client_secret = "fe3cae1a-195c-4d09-a0ba-03379199ed1a",
            ssl_verify = "no",
            scope = "openid email profile",
            keepalive = "no",
            logout_path = "/logout",
			post_logout_redirect_uri = string.format("https://%s:1443",ngx.var.host),
	     	access_token_expires_in = 300,
			renew_access_token_on_expiry=false,	     	
			revoke_tokens_on_logout = true,
			session_contents = {id_token=true,access_token=true},    
          	}

		
		
		-- call authenticate for OpenID Connect user authentication
		local res, err , target, session = require("resty.openidc").authenticate(opts)
		if err then
			ngx.status = 500
            		ngx.say(err)
            		ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
		end
	  


		-- generate api_key for user
		local shell = require "resty.shell"
		local ok, stdout, stderr, reason, status=shell.run([[openssl rand -base64 32 | tr -d "\n"]],nil,1000,4096)
		if not ok then
        		ngx.say("failed to generate api key: ", err)
            		return
		end



		-- connect to redis server
		local redis = require "resty.redis"
		local red = redis:new()
		local ok, err = red:connect("redis_proje_api", 6379)
		if not ok then
			ngx.say("failed to connect: ", err)
			return
		end	  

		-- authenticate redis server
		local result, err = red:auth("9090")
		if not result then
			ngx.say("failed to authenticate: ", err)
			return
		end
		
		-- enter data to redis server
		t1=res.access_token
		t2=stdout
		ok, err = red:set(t2, t1)
		if not ok then
			ngx.say("failed to set: ", err)
			return
		end
	  
		--set expire time for keys
		ok,err = red:expire(t2,300)
		if not ok then
			ngx.say("failed to set expire time: ", err)
			return
		end

		ok, err = red:close()
		if not ok then
			ngx.say("failed to close redis!: ", err)
			return
		end		

		
		--display
		ngx.header["Content-type"] = "text/html"
		ngx.say("</br>")
		ngx.say("hello  " ..res.id_token.name)
		ngx.say("</br>")
		ngx.say("</br>")
		ngx.say("your API Key is :")
		ngx.say("</br>")
		ngx.say(t2)
		ngx.say("</br>")
		ngx.say("</br>")
		ngx.say(string.format('<form action="https://%s:1443/logout"><input type="submit" value="Logout"/></form>',ngx.var.host))
		--ngx.say('<form action="https://localhost:8443/auth/realms/welcome/account/#/"><input type="submit" value="account page"/></form>')
	                        
		--session:close()
		}
		   
	}
}
